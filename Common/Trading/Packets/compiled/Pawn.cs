// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Packets/Pawn.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Trading {

  /// <summary>Holder for reflection information generated from Packets/Pawn.proto</summary>
  public static partial class PawnReflection {

    #region Descriptor
    /// <summary>File descriptor for Packets/Pawn.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static PawnReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChJQYWNrZXRzL1Bhd24ucHJvdG8SB1RyYWRpbmcaFFBhY2tldHMvR2VuZGVy",
            "LnByb3RvIoABCglQcm90b1Bhd24SDwoHRGVmTmFtZRgBIAEoCRIfCgZHZW5k",
            "ZXIYAiABKA4yDy5UcmFkaW5nLkdlbmRlchIMCgROYW1lGAMgASgJEhcKD0Jp",
            "b2xvZ2ljYWxUaWNrcxgEIAEoAxIaChJDaHJvbm9sb2dpY2FsVGlja3MYBSAB",
            "KANiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Trading.GenderReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Trading.ProtoPawn), global::Trading.ProtoPawn.Parser, new[]{ "DefName", "Gender", "Name", "BiologicalTicks", "ChronologicalTicks" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class ProtoPawn : pb::IMessage<ProtoPawn> {
    private static readonly pb::MessageParser<ProtoPawn> _parser = new pb::MessageParser<ProtoPawn>(() => new ProtoPawn());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ProtoPawn> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Trading.PawnReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProtoPawn() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProtoPawn(ProtoPawn other) : this() {
      defName_ = other.defName_;
      gender_ = other.gender_;
      name_ = other.name_;
      biologicalTicks_ = other.biologicalTicks_;
      chronologicalTicks_ = other.chronologicalTicks_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ProtoPawn Clone() {
      return new ProtoPawn(this);
    }

    /// <summary>Field number for the "DefName" field.</summary>
    public const int DefNameFieldNumber = 1;
    private string defName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DefName {
      get { return defName_; }
      set {
        defName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "Gender" field.</summary>
    public const int GenderFieldNumber = 2;
    private global::Trading.Gender gender_ = global::Trading.Gender.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Trading.Gender Gender {
      get { return gender_; }
      set {
        gender_ = value;
      }
    }

    /// <summary>Field number for the "Name" field.</summary>
    public const int NameFieldNumber = 3;
    private string name_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "BiologicalTicks" field.</summary>
    public const int BiologicalTicksFieldNumber = 4;
    private long biologicalTicks_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long BiologicalTicks {
      get { return biologicalTicks_; }
      set {
        biologicalTicks_ = value;
      }
    }

    /// <summary>Field number for the "ChronologicalTicks" field.</summary>
    public const int ChronologicalTicksFieldNumber = 5;
    private long chronologicalTicks_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public long ChronologicalTicks {
      get { return chronologicalTicks_; }
      set {
        chronologicalTicks_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ProtoPawn);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ProtoPawn other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DefName != other.DefName) return false;
      if (Gender != other.Gender) return false;
      if (Name != other.Name) return false;
      if (BiologicalTicks != other.BiologicalTicks) return false;
      if (ChronologicalTicks != other.ChronologicalTicks) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DefName.Length != 0) hash ^= DefName.GetHashCode();
      if (Gender != global::Trading.Gender.None) hash ^= Gender.GetHashCode();
      if (Name.Length != 0) hash ^= Name.GetHashCode();
      if (BiologicalTicks != 0L) hash ^= BiologicalTicks.GetHashCode();
      if (ChronologicalTicks != 0L) hash ^= ChronologicalTicks.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DefName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(DefName);
      }
      if (Gender != global::Trading.Gender.None) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Gender);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (BiologicalTicks != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(BiologicalTicks);
      }
      if (ChronologicalTicks != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(ChronologicalTicks);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DefName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DefName);
      }
      if (Gender != global::Trading.Gender.None) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Gender);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (BiologicalTicks != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(BiologicalTicks);
      }
      if (ChronologicalTicks != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ChronologicalTicks);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ProtoPawn other) {
      if (other == null) {
        return;
      }
      if (other.DefName.Length != 0) {
        DefName = other.DefName;
      }
      if (other.Gender != global::Trading.Gender.None) {
        Gender = other.Gender;
      }
      if (other.Name.Length != 0) {
        Name = other.Name;
      }
      if (other.BiologicalTicks != 0L) {
        BiologicalTicks = other.BiologicalTicks;
      }
      if (other.ChronologicalTicks != 0L) {
        ChronologicalTicks = other.ChronologicalTicks;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            DefName = input.ReadString();
            break;
          }
          case 16: {
            Gender = (global::Trading.Gender) input.ReadEnum();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 32: {
            BiologicalTicks = input.ReadInt64();
            break;
          }
          case 40: {
            ChronologicalTicks = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
