// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Stores/CompletedTradeStore.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Trading {

  /// <summary>Holder for reflection information generated from Stores/CompletedTradeStore.proto</summary>
  public static partial class CompletedTradeStoreReflection {

    #region Descriptor
    /// <summary>File descriptor for Stores/CompletedTradeStore.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static CompletedTradeStoreReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiBTdG9yZXMvQ29tcGxldGVkVHJhZGVTdG9yZS5wcm90bxIHVHJhZGluZxoX",
            "U3RvcmVzL1RyYWRlU3RvcmUucHJvdG8iaQoTQ29tcGxldGVkVHJhZGVTdG9y",
            "ZRIiCgVUcmFkZRgBIAEoCzITLlRyYWRpbmcuVHJhZGVTdG9yZRIbChNQZW5k",
            "aW5nTm90aWZpY2F0aW9uGAIgAygJEhEKCUNhbmNlbGxlZBgDIAEoCGIGcHJv",
            "dG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Trading.TradeStoreReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Trading.CompletedTradeStore), global::Trading.CompletedTradeStore.Parser, new[]{ "Trade", "PendingNotification", "Cancelled" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class CompletedTradeStore : pb::IMessage<CompletedTradeStore> {
    private static readonly pb::MessageParser<CompletedTradeStore> _parser = new pb::MessageParser<CompletedTradeStore>(() => new CompletedTradeStore());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CompletedTradeStore> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Trading.CompletedTradeStoreReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CompletedTradeStore() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CompletedTradeStore(CompletedTradeStore other) : this() {
      trade_ = other.trade_ != null ? other.trade_.Clone() : null;
      pendingNotification_ = other.pendingNotification_.Clone();
      cancelled_ = other.cancelled_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CompletedTradeStore Clone() {
      return new CompletedTradeStore(this);
    }

    /// <summary>Field number for the "Trade" field.</summary>
    public const int TradeFieldNumber = 1;
    private global::Trading.TradeStore trade_;
    /// <summary>
    /// This trade's ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Trading.TradeStore Trade {
      get { return trade_; }
      set {
        trade_ = value;
      }
    }

    /// <summary>Field number for the "PendingNotification" field.</summary>
    public const int PendingNotificationFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_pendingNotification_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> pendingNotification_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// UUIDs of each party pending notification
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> PendingNotification {
      get { return pendingNotification_; }
    }

    /// <summary>Field number for the "Cancelled" field.</summary>
    public const int CancelledFieldNumber = 3;
    private bool cancelled_;
    /// <summary>
    /// Whether the trade was cancelled
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Cancelled {
      get { return cancelled_; }
      set {
        cancelled_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CompletedTradeStore);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CompletedTradeStore other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(Trade, other.Trade)) return false;
      if(!pendingNotification_.Equals(other.pendingNotification_)) return false;
      if (Cancelled != other.Cancelled) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (trade_ != null) hash ^= Trade.GetHashCode();
      hash ^= pendingNotification_.GetHashCode();
      if (Cancelled != false) hash ^= Cancelled.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (trade_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Trade);
      }
      pendingNotification_.WriteTo(output, _repeated_pendingNotification_codec);
      if (Cancelled != false) {
        output.WriteRawTag(24);
        output.WriteBool(Cancelled);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (trade_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Trade);
      }
      size += pendingNotification_.CalculateSize(_repeated_pendingNotification_codec);
      if (Cancelled != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CompletedTradeStore other) {
      if (other == null) {
        return;
      }
      if (other.trade_ != null) {
        if (trade_ == null) {
          Trade = new global::Trading.TradeStore();
        }
        Trade.MergeFrom(other.Trade);
      }
      pendingNotification_.Add(other.pendingNotification_);
      if (other.Cancelled != false) {
        Cancelled = other.Cancelled;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            if (trade_ == null) {
              Trade = new global::Trading.TradeStore();
            }
            input.ReadMessage(Trade);
            break;
          }
          case 18: {
            pendingNotification_.AddEntriesFrom(input, _repeated_pendingNotification_codec);
            break;
          }
          case 24: {
            Cancelled = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
