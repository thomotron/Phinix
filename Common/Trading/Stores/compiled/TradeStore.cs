// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Stores/TradeStore.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Trading {

  /// <summary>Holder for reflection information generated from Stores/TradeStore.proto</summary>
  public static partial class TradeStoreReflection {

    #region Descriptor
    /// <summary>File descriptor for Stores/TradeStore.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TradeStoreReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChdTdG9yZXMvVHJhZGVTdG9yZS5wcm90bxIHVHJhZGluZxoYU3RvcmVzL1By",
            "b3RvVGhpbmdzLnByb3RvItIBCgpUcmFkZVN0b3JlEg8KB1RyYWRlSWQYASAB",
            "KAkSEgoKUGFydHlVdWlkcxgCIAMoCRI7CgxJdGVtc09uT2ZmZXIYAyADKAsy",
            "JS5UcmFkaW5nLlRyYWRlU3RvcmUuSXRlbXNPbk9mZmVyRW50cnkSFwoPQWNj",
            "ZXB0ZWRQYXJ0aWVzGAQgAygJGkkKEUl0ZW1zT25PZmZlckVudHJ5EgsKA2tl",
            "eRgBIAEoCRIjCgV2YWx1ZRgCIAEoCzIULlRyYWRpbmcuUHJvdG9UaGluZ3M6",
            "AjgBYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Trading.ProtoThingsReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Trading.TradeStore), global::Trading.TradeStore.Parser, new[]{ "TradeId", "PartyUuids", "ItemsOnOffer", "AcceptedParties" }, null, null, null, new pbr::GeneratedClrTypeInfo[] { null, })
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class TradeStore : pb::IMessage<TradeStore> {
    private static readonly pb::MessageParser<TradeStore> _parser = new pb::MessageParser<TradeStore>(() => new TradeStore());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TradeStore> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Trading.TradeStoreReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TradeStore() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TradeStore(TradeStore other) : this() {
      tradeId_ = other.tradeId_;
      partyUuids_ = other.partyUuids_.Clone();
      itemsOnOffer_ = other.itemsOnOffer_.Clone();
      acceptedParties_ = other.acceptedParties_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TradeStore Clone() {
      return new TradeStore(this);
    }

    /// <summary>Field number for the "TradeId" field.</summary>
    public const int TradeIdFieldNumber = 1;
    private string tradeId_ = "";
    /// <summary>
    /// This trade's ID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string TradeId {
      get { return tradeId_; }
      set {
        tradeId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "PartyUuids" field.</summary>
    public const int PartyUuidsFieldNumber = 2;
    private static readonly pb::FieldCodec<string> _repeated_partyUuids_codec
        = pb::FieldCodec.ForString(18);
    private readonly pbc::RepeatedField<string> partyUuids_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// UUIDs of each party in this trade
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> PartyUuids {
      get { return partyUuids_; }
    }

    /// <summary>Field number for the "ItemsOnOffer" field.</summary>
    public const int ItemsOnOfferFieldNumber = 3;
    private static readonly pbc::MapField<string, global::Trading.ProtoThings>.Codec _map_itemsOnOffer_codec
        = new pbc::MapField<string, global::Trading.ProtoThings>.Codec(pb::FieldCodec.ForString(10, ""), pb::FieldCodec.ForMessage(18, global::Trading.ProtoThings.Parser), 26);
    private readonly pbc::MapField<string, global::Trading.ProtoThings> itemsOnOffer_ = new pbc::MapField<string, global::Trading.ProtoThings>();
    /// <summary>
    /// Map of items on offer organised by each party's UUID
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::MapField<string, global::Trading.ProtoThings> ItemsOnOffer {
      get { return itemsOnOffer_; }
    }

    /// <summary>Field number for the "AcceptedParties" field.</summary>
    public const int AcceptedPartiesFieldNumber = 4;
    private static readonly pb::FieldCodec<string> _repeated_acceptedParties_codec
        = pb::FieldCodec.ForString(34);
    private readonly pbc::RepeatedField<string> acceptedParties_ = new pbc::RepeatedField<string>();
    /// <summary>
    /// UUIDs of each party that has accepted
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<string> AcceptedParties {
      get { return acceptedParties_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TradeStore);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TradeStore other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (TradeId != other.TradeId) return false;
      if(!partyUuids_.Equals(other.partyUuids_)) return false;
      if (!ItemsOnOffer.Equals(other.ItemsOnOffer)) return false;
      if(!acceptedParties_.Equals(other.acceptedParties_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (TradeId.Length != 0) hash ^= TradeId.GetHashCode();
      hash ^= partyUuids_.GetHashCode();
      hash ^= ItemsOnOffer.GetHashCode();
      hash ^= acceptedParties_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (TradeId.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TradeId);
      }
      partyUuids_.WriteTo(output, _repeated_partyUuids_codec);
      itemsOnOffer_.WriteTo(output, _map_itemsOnOffer_codec);
      acceptedParties_.WriteTo(output, _repeated_acceptedParties_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (TradeId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TradeId);
      }
      size += partyUuids_.CalculateSize(_repeated_partyUuids_codec);
      size += itemsOnOffer_.CalculateSize(_map_itemsOnOffer_codec);
      size += acceptedParties_.CalculateSize(_repeated_acceptedParties_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TradeStore other) {
      if (other == null) {
        return;
      }
      if (other.TradeId.Length != 0) {
        TradeId = other.TradeId;
      }
      partyUuids_.Add(other.partyUuids_);
      itemsOnOffer_.Add(other.itemsOnOffer_);
      acceptedParties_.Add(other.acceptedParties_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            TradeId = input.ReadString();
            break;
          }
          case 18: {
            partyUuids_.AddEntriesFrom(input, _repeated_partyUuids_codec);
            break;
          }
          case 26: {
            itemsOnOffer_.AddEntriesFrom(input, _map_itemsOnOffer_codec);
            break;
          }
          case 34: {
            acceptedParties_.AddEntriesFrom(input, _repeated_acceptedParties_codec);
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
