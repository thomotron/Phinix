// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Packets/LoginResponsePacket.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace UserManagement {

  /// <summary>Holder for reflection information generated from Packets/LoginResponsePacket.proto</summary>
  public static partial class LoginResponsePacketReflection {

    #region Descriptor
    /// <summary>File descriptor for Packets/LoginResponsePacket.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static LoginResponsePacketReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CiFQYWNrZXRzL0xvZ2luUmVzcG9uc2VQYWNrZXQucHJvdG8SDlVzZXJNYW5h",
            "Z2VtZW50GiBQYWNrZXRzL0xvZ2luRmFpbHVyZVJlYXNvbi5wcm90byKcAQoT",
            "TG9naW5SZXNwb25zZVBhY2tldBIPCgdTdWNjZXNzGAEgASgIEgwKBFV1aWQY",
            "AiABKAkSEwoLRGlzcGxheU5hbWUYAyABKAkSOQoNRmFpbHVyZVJlYXNvbhgE",
            "IAEoDjIiLlVzZXJNYW5hZ2VtZW50LkxvZ2luRmFpbHVyZVJlYXNvbhIWCg5G",
            "YWlsdXJlTWVzc2FnZRgFIAEoCWIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::UserManagement.LoginFailureReasonReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::UserManagement.LoginResponsePacket), global::UserManagement.LoginResponsePacket.Parser, new[]{ "Success", "Uuid", "DisplayName", "FailureReason", "FailureMessage" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  public sealed partial class LoginResponsePacket : pb::IMessage<LoginResponsePacket> {
    private static readonly pb::MessageParser<LoginResponsePacket> _parser = new pb::MessageParser<LoginResponsePacket>(() => new LoginResponsePacket());
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<LoginResponsePacket> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::UserManagement.LoginResponsePacketReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginResponsePacket() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginResponsePacket(LoginResponsePacket other) : this() {
      success_ = other.success_;
      uuid_ = other.uuid_;
      displayName_ = other.displayName_;
      failureReason_ = other.failureReason_;
      failureMessage_ = other.failureMessage_;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public LoginResponsePacket Clone() {
      return new LoginResponsePacket(this);
    }

    /// <summary>Field number for the "Success" field.</summary>
    public const int SuccessFieldNumber = 1;
    private bool success_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Success {
      get { return success_; }
      set {
        success_ = value;
      }
    }

    /// <summary>Field number for the "Uuid" field.</summary>
    public const int UuidFieldNumber = 2;
    private string uuid_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Uuid {
      get { return uuid_; }
      set {
        uuid_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "DisplayName" field.</summary>
    public const int DisplayNameFieldNumber = 3;
    private string displayName_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DisplayName {
      get { return displayName_; }
      set {
        displayName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "FailureReason" field.</summary>
    public const int FailureReasonFieldNumber = 4;
    private global::UserManagement.LoginFailureReason failureReason_ = 0;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::UserManagement.LoginFailureReason FailureReason {
      get { return failureReason_; }
      set {
        failureReason_ = value;
      }
    }

    /// <summary>Field number for the "FailureMessage" field.</summary>
    public const int FailureMessageFieldNumber = 5;
    private string failureMessage_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FailureMessage {
      get { return failureMessage_; }
      set {
        failureMessage_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as LoginResponsePacket);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(LoginResponsePacket other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Success != other.Success) return false;
      if (Uuid != other.Uuid) return false;
      if (DisplayName != other.DisplayName) return false;
      if (FailureReason != other.FailureReason) return false;
      if (FailureMessage != other.FailureMessage) return false;
      return true;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Success != false) hash ^= Success.GetHashCode();
      if (Uuid.Length != 0) hash ^= Uuid.GetHashCode();
      if (DisplayName.Length != 0) hash ^= DisplayName.GetHashCode();
      if (FailureReason != 0) hash ^= FailureReason.GetHashCode();
      if (FailureMessage.Length != 0) hash ^= FailureMessage.GetHashCode();
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Success != false) {
        output.WriteRawTag(8);
        output.WriteBool(Success);
      }
      if (Uuid.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Uuid);
      }
      if (DisplayName.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(DisplayName);
      }
      if (FailureReason != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) FailureReason);
      }
      if (FailureMessage.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(FailureMessage);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Success != false) {
        size += 1 + 1;
      }
      if (Uuid.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Uuid);
      }
      if (DisplayName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DisplayName);
      }
      if (FailureReason != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) FailureReason);
      }
      if (FailureMessage.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FailureMessage);
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(LoginResponsePacket other) {
      if (other == null) {
        return;
      }
      if (other.Success != false) {
        Success = other.Success;
      }
      if (other.Uuid.Length != 0) {
        Uuid = other.Uuid;
      }
      if (other.DisplayName.Length != 0) {
        DisplayName = other.DisplayName;
      }
      if (other.FailureReason != 0) {
        FailureReason = other.FailureReason;
      }
      if (other.FailureMessage.Length != 0) {
        FailureMessage = other.FailureMessage;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Success = input.ReadBool();
            break;
          }
          case 18: {
            Uuid = input.ReadString();
            break;
          }
          case 26: {
            DisplayName = input.ReadString();
            break;
          }
          case 32: {
            failureReason_ = (global::UserManagement.LoginFailureReason) input.ReadEnum();
            break;
          }
          case 42: {
            FailureMessage = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
